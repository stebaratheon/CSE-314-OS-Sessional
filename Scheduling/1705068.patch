diff --git a/1705068.patch b/1705068.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 09d790c..bfad111 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -217,7 +217,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/console.c b/console.c
index a280d2b..a510568 100644
--- a/console.c
+++ b/console.c
@@ -296,4 +296,3 @@ consoleinit(void)
 
   ioapicenable(IRQ_KBD, 0);
 }
-
diff --git a/defs.h b/defs.h
index 82fb982..2198504 100644
--- a/defs.h
+++ b/defs.h
@@ -121,6 +121,7 @@ int             wait(void);
 void            wakeup(void*);
 void            yield(void);
 
+
 // swtch.S
 void            swtch(struct context**, struct context*);
 
@@ -188,3 +189,4 @@ void            clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+ 
\ No newline at end of file
diff --git a/fetch.c b/fetch.c
new file mode 100644
index 0000000..1735032
--- /dev/null
+++ b/fetch.c
@@ -0,0 +1,130 @@
+#include "types.h"
+#include "user.h"
+#include "pstat.h"
+
+#undef USE_YIELD
+#define MAX_CHILDREN 32
+#define LARGE_TICKET_COUNT 100000
+#define MAX_YIELDS_FOR_SETUP 100
+
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
+}
+
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+int spawn(int tickets) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+#ifdef USE_YIELD
+        yield_forever();
+#else
+        run_forever();
+#endif
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
+
+int find_index_of_pid(int *list, int list_size, int pid) {
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, info.num_processes, pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+                  "       seconds is the number of time units to run for\n"
+                  "       ticketsX is the number of tickets to give to subprocess N\n",
+                  argv[0]);
+        exit();
+    }
+    int tickets_for[MAX_CHILDREN];
+    int active_pids[MAX_CHILDREN];
+    int num_seconds = atoi(argv[1]);
+    int num_children = argc - 2;
+    if (num_children > MAX_CHILDREN) {
+        printf(2, "only up to %d supported\n", MAX_CHILDREN);
+        exit();
+    }
+    /* give us a lot of ticket so we don't get starved */
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < num_children; ++i) {
+        int tickets = atoi(argv[i + 2]);
+        tickets_for[i] = tickets;
+        active_pids[i] = spawn(tickets);
+    }
+    wait_for_ticket_counts(num_children, active_pids, tickets_for);
+    struct pstat before, after;
+    before.num_processes = after.num_processes = -1;
+    getpinfo(&before);
+    sleep(num_seconds);
+    getpinfo(&after);
+    for (int i = 0; i < num_children; ++i) {
+        kill(active_pids[i]);
+    }
+    for (int i = 0; i < num_children; ++i) {
+        wait();
+    }
+    if (before.num_processes >= NPROC || after.num_processes >= NPROC) {
+        printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+        return 1;
+    }
+    if (before.num_processes < 0 || after.num_processes < 0) {
+        printf(2, "getpinfo's num_processes is negative -- not changed by syscall?\n");
+        return 1;
+    }
+    printf(1, "TICKETS\tTICKS\n");
+    for (int i = 0; i < num_children; ++i) {
+        int before_index = find_index_of_pid(before.pid, before.num_processes, active_pids[i]);
+        int after_index = find_index_of_pid(after.pid, after.num_processes, active_pids[i]);
+        if (before_index == -1)
+            printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+        if (after_index == -1)
+            printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+        if (before_index == -1 || after_index == -1) {
+            printf(1, "%d\t--unknown--\n", tickets_for[i]);
+        } else {
+            if (before.tickets[before_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+            }
+            if (after.tickets[after_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+            }
+            printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+        }
+    }
+    exit();
+}
diff --git a/proc.c b/proc.c
index 806b1b1..34ff407 100644
--- a/proc.c
+++ b/proc.c
@@ -6,14 +6,31 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "random.c"
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+int totalTickets=0;
+void setTickets(struct proc* p,int tickets)
+{
+  totalTickets -= p->tickets;
+  p->tickets = tickets;
+  totalTickets += tickets;
+}
+void modifyTickets(struct proc* p,int flag){
+  if(p->state!=SLEEPING){
+    panic("Not sleeping");
+  }
+  if(flag == 1){
+    totalTickets -= p->tickets;
+  }else{
+    totalTickets += p->tickets;
+  }
+}
 static struct proc *initproc;
-
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -203,6 +220,8 @@ fork(void)
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
+  setTickets(np,curproc->tickets);
+
   for(i = 0; i < NOFILE; i++)
     if(curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
@@ -261,6 +280,8 @@ exit(void)
     }
   }
 
+  //updating the tickets to exclude the process
+  setTickets(curproc,0);
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
   sched();
@@ -295,6 +316,9 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+        //lottery related stuff
+        p->ticks = 0;
+        setTickets(p,0);
         release(&ptable.lock);
         return pid;
       }
@@ -325,16 +349,35 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+
+  //set initial tickets to 10 and calling rand with seed
+  acquire(&ptable.lock);
+  setTickets(ptable.proc,10);
+  release(&ptable.lock);
+  unsigned long seed = 1705068;
+  sgenrand(seed);
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
+    //tasks for lottery scheduling
+    int count = 0;
+    totalTickets = (totalTickets==0)? 1:totalTickets;
+    int target = genrand()%totalTickets;
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
+      {
+        count += p->tickets;
+        continue;
+      }
+      count += p->tickets;
+      if( count <= target )
         continue;
+      //if not, we have reached the target,so run this process
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -342,8 +385,12 @@ scheduler(void)
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      //updating the state of added attribute also
+      p->being_run = 1;
+      int initialTicks = ticks;
       swtch(&(c->scheduler), p->context);
+      //after process being run, update the ticks
+      p->ticks = ticks - initialTicks;
       switchkvm();
 
       // Process is done running for now.
@@ -438,7 +485,8 @@ sleep(void *chan, struct spinlock *lk)
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
-
+  //lottery 
+  modifyTickets(p,1);
   sched();
 
   // Tidy up.
@@ -459,9 +507,12 @@ wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == SLEEPING && p->chan == chan){
+        p->state = RUNNABLE;
+        //modifyTickets(p,0); //lottery
+    }
+  }
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +537,10 @@ kill(int pid)
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if(p->state == SLEEPING){
         p->state = RUNNABLE;
+        //modifyTickets(p,0);//lottery
+      }
       release(&ptable.lock);
       return 0;
     }
@@ -532,3 +585,28 @@ procdump(void)
     cprintf("\n");
   }
 }
+int helperGetInfo(struct pstat* process){
+  acquire(&ptable.lock);
+  struct proc* p;
+  int idx;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    idx = p - ptable.proc;
+    if(p->state!=UNUSED)
+    {
+      process->pid[idx] = p->pid;
+      process->tickets[idx] = p->tickets;
+      process->ticks[idx] = p->ticks;
+      process->inuse[idx] = p->being_run;
+      //cprintf("tickets = %d    ticks = %d\n",p->tickets,p->ticks);
+    }
+  }
+  release(&ptable.lock);
+  return 0;
+}
+void helperSetTickets(int tickets)
+{
+  acquire(&ptable.lock);
+  struct proc* process = myproc();
+  setTickets(process,tickets);
+  release(&ptable.lock);
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..5a4e95a 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,4 @@
+#include "pstat.h"
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -10,9 +11,9 @@ struct cpu {
   struct proc *proc;           // The process running on this cpu or null
 };
 
+
 extern struct cpu cpus[NCPU];
 extern int ncpu;
-
 //PAGEBREAK: 17
 // Saved registers for kernel context switches.
 // Don't need to save all the segment registers (%cs, etc),
@@ -49,10 +50,19 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //for lottery scheduling
+  int tickets;
+  int being_run;
+  int ticks;
 };
 
+//function for setting tickets for process
+void setTickets(struct proc* p,int tickets);
+int helperGetInfo(struct pstat* process);
+void helperSetTickets(int tickets);
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
 //   fixed-size stack
-//   expandable heap
+//   expandable heap
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..8ef3d30
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,22 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+
+#include "param.h"
+
+
+struct pstat {
+
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+
+  int tickets[NPROC]; // the number of tickets this process has
+
+  int pid[NPROC];     // the PID of each process
+
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+  int num_processes;
+};
+
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/random.c b/random.c
new file mode 100644
index 0000000..1f8efb1
--- /dev/null
+++ b/random.c
@@ -0,0 +1,120 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
\ No newline at end of file
diff --git a/random.h b/random.h
new file mode 100644
index 0000000..cb3083e
--- /dev/null
+++ b/random.h
@@ -0,0 +1,3 @@
+void sgenrand(unsigned long);
+long genrand(void);
+long random_at_most(long);
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..77e7a49 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getpinfo(void);
+extern int sys_settickets(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getpinfo] sys_getpinfo,
+[SYS_settickets] sys_settickets,
+[SYS_yield] sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..f2668f4 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getpinfo 22
+#define SYS_settickets 23
+#define SYS_yield 24
diff --git a/sysproc.c b/sysproc.c
index 0686d29..5b542dd 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "pstat.h"
 int
 sys_fork(void)
 {
@@ -89,3 +89,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_getpinfo(void)
+{
+  struct pstat* process;
+  if(argint(0,(int*)(&process))<0)
+  {
+    return -1;
+  }
+  helperGetInfo(process);
+  return 0;
+}
+
+int sys_settickets(void)
+{
+  int n;
+  argint(0,&n);
+  helperSetTickets(n);
+  return 0;
+}
+
+void sys_yield(void)
+{
+  yield();
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..2b15255 100644
--- a/user.h
+++ b/user.h
@@ -1,6 +1,6 @@
 struct stat;
 struct rtcdate;
-
+#include "pstat.h"
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getpinfo(struct pstat*);
+int settickets(int);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..9c91fc9 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,6 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getpinfo)
+SYSCALL(settickets)
+SYSCALL(yield)
